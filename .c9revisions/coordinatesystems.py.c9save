{"ts":1376680912713,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module.exports = {\n  cartesian: require(\"./cartesian\"),\n  spherical: require(\"./spherical\")\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":95}]],"length":95}
{"contributors":[],"silentsave":false,"ts":1376680973670,"patch":[[{"diffs":[[-1,"module.exports = {\n  cartesian: require(\"./cartesian\"),\n  spherical: require(\"./"],[1,"systems = {}\nsystems['cartesian']={}\nsystems['"],[0,"sphe"]],"start1":0,"start2":0,"length1":84,"length2":50},{"diffs":[[0,"ical"],[-1,"\")\n};"],[1,"']={}"],[0,"\n"]],"start1":51,"start2":51,"length1":10,"length2":10}]],"length":61,"saved":false}
{"ts":1376681388929,"patch":[[{"diffs":[[1,"from math import sqrt\n"],[0,"systems = {}"]],"start1":0,"start2":0,"length1":12,"length2":34},{"diffs":[[0,"erical']={}\n"],[1,"systems['cartesian']['name'] = \"cartesian\"\nsystems['cartesian']['formatDistance'] = cartformatDistance\nsystems['cartesian']['ringArea'] = cartringArea\nsystems['cartesian']['absoluteArea'] = abs\nsystems['cartesian']['triangleArea'] = carttriangleArea\nsystems['cartesian']['distance'] = cartdistance\n\ndef cartformatDistance(d):\n    return str(d)\n\n\ndef cartringArea(ring):\n    area = ring[-1][1] * ring[0][0] - ring[-1][0] * ring[0][1]\n    i=0\n    for j in ring:\n        area += ring[i - 1][1] * j[0] - ring[i - 1][0] * j[1];\n        i+=1\n    return area*0.5\n\ndef carttriangleArea(triangle):\n    return abs((triangle[0][0] - triangle[2][0]) * (triangle[1][1] - triangle[0][1]) -(triangle[0][0] - triangle[1][0]) * (triangle[2][1] - triangle[0][1]))\n\ndef cartdistance(x0, y0, x1, y1):\n    dx = x0 - x1\n    dy = y0 - y1\n    return sqrt(dx * dx + dy * dy)\n"]],"start1":71,"start2":71,"length1":12,"length2":862}]],"length":933,"saved":false}
{"ts":1376681653929,"patch":[[{"diffs":[[0,"ort sqrt"],[1,",pi,cos,sin"],[0,"\nsystems"]],"start1":13,"start2":13,"length1":16,"length2":27},{"diffs":[[0,"y * dy)\n"],[1,"\n\npi4 = pi / 4\nradians = pi / 180\n\nsystems['spherical']['name'] = \"spherical\";\nsystems['spherical']['formatDistance'] = sphformatDistance;\nsystems['spherical']['ringArea'] = sphringArea;\nsystems['spherical']['absoluteArea'] = sphabsoluteArea;\nsystems['spherical']['triangleArea'] = sphtriangleArea;\nsystems['spherical']['distance'] = sphhaversinDistance;\n\nfunction formatDistance(radians) {\n  var km = radians * 6371;\n  return (km > 1 ? km.toFixed(3) + \"km\" : (km * 1000).toPrecision(3) + \"m\") +\n    \" (\" + (radians * 180 / Math.PI).toPrecision(3) + \"°)\";\n}\n\ndef sphringArea(ring):\n    if not len(ring):\n        return 0\n    area = 0\n    p = ring[0]\n    lambd = p[0] * radians\n    phi = p[1] * radians / 2.0 + pi4\n    lambda0 = lambd\n    cosphi0 = cos(phi)\n    sinphi0 = sin(phi)\n\n  for (var i = 1, n = ring.length; i < n; ++i) {\n    p = ring[i];\n    lambda = p[0] * radians;\n    phi = p[1] * radians / 2 + pi4;\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    var dlambda = lambda - lambda0;\n    var cosphi = Math.cos(phi);\n    var sinphi = Math.sin(phi);\n    var k = sinphi0 * sinphi;\n    var u = cosphi0 * cosphi + k * Math.cos(dlambda);\n    var v = k * Math.sin(dlambda);\n    area += Math.atan2(v, u);\n\n    // Advance the previous point.\n    lambda0 = lambda;\n    cosphi0 = cosphi;\n    sinphi0 = sinphi;\n  }\n\n  return 2 * area;\n}\n\nfunction absoluteArea(a) {\n  return a < 0 ? a + 4 * pi : a;\n}\n\nfunction triangleArea(t) {\n  var a = distance(t[0], t[1]);\n  var b = distance(t[1], t[2]);\n  var c = distance(t[2], t[0]);\n  var s = (a + b + c) / 2;\n  return 4 * Math.atan(Math.sqrt(Math.max(0, Math.tan(s / 2) * Math.tan((s - a) / 2) * Math.tan((s - b) / 2) * Math.tan((s - c) / 2))));\n}\n\nfunction distance(a, b) {\n  var deltalambda = (b[0] - a[0]) * radians;\n  var sindeltalambda = Math.sin(deltalambda);\n  var cosdeltalambda = Math.cos(deltalambda);\n  var sinphi0 = Math.sin(a[1] * radians);\n  var cosphi0 = Math.cos(a[1] * radians);\n  var sinphi1 = Math.sin(b[1] * radians);\n  var cosphi1 = Math.cos(b[1] * radians);\n  var _;\n  return Math.atan2(Math.sqrt((_ = cosphi1 * sindeltalambda) * _ + (_ = cosphi0 * sinphi1 - sinphi0 * cosphi1 * cosdeltalambda) * _), sinphi0 * sinphi1 + cosphi0 * cosphi1 * cosdeltalambda);\n}\n\nfunction haversinDistance(x0, y0, x1, y1) {\n  x0 *= radians;\n  y0 *= radians;\n  x1 *= radians;\n  y1 *= radians;\n  return 2 * Math.asin(Math.sqrt(haversin(y1 - y0) + Math.cos(y0) * Math.cos(y1) * haversin(x1 - x0)));\n}\n\nfunction haversin(x) {\n  return (x = Math.sin(x / 2)) * x;\n}"]],"start1":936,"start2":936,"length1":8,"length2":2695}]],"length":3631,"saved":false}
{"ts":1376683246632,"patch":[[{"diffs":[[0,",cos,sin"],[1,",atan2,round"],[0,"\nsystems"]],"start1":24,"start2":24,"length1":16,"length2":28},{"diffs":[[0,"tance;\n\n"],[-1,"function "],[1,"def sph"],[0,"formatDi"]],"start1":1304,"start2":1304,"length1":25,"length2":23},{"diffs":[[0,"radians)"],[-1," {\n  var"],[1,":\n   "],[0," km = ra"]],"start1":1334,"start2":1334,"length1":24,"length2":21},{"diffs":[[0,"s * 6371"],[-1,";\n"],[1,".0;\n  "],[0,"  return"]],"start1":1359,"start2":1359,"length1":18,"length2":22},{"diffs":[[0,"rn ("],[-1,"km > 1 ? km.toFixed(3"],[1,"str(round(km,3)"],[0,") +"],[-1," "],[0,"\"km\" "],[-1,": (km * 1000).toPrecision(3) + \"m\") +\n    \" (\" + (radians * 180 / Math.PI).toPrecision(3) + \"°)\";\n}"],[1,"if km > 1 else \"%.3fm\"%(km * 1000)) + \" (%.3f°)\"%(radians * 180 / pi)"],[0,"\n\nde"]],"start1":1379,"start2":1379,"length1":137,"length2":100},{"diffs":[[0,"i)\n\n"],[1,"  "],[0,"  for "],[-1,"(var i = 1, n = ring.length; i < n; ++i) {\n"],[1,"p of ring[1:]:\n    "],[0,"    "]],"start1":1695,"start2":1695,"length1":57,"length2":35},{"diffs":[[0,"ing[i];\n"],[1,"    "],[0,"    lamb"]],"start1":1735,"start2":1735,"length1":16,"length2":20},{"diffs":[[0,"   lambd"],[-1,"a"],[0," = p[0] "]],"start1":1748,"start2":1748,"length1":17,"length2":16},{"diffs":[[0,"adians;\n    "],[1,"    "],[0,"phi = p[1] *"]],"start1":1767,"start2":1767,"length1":24,"length2":28},{"diffs":[[0," / 2"],[1,".0"],[0," + pi4;\n"],[-1,"\n"],[0,"    "],[-1,"//"],[1,"    #"],[0," Sph"]],"start1":1803,"start2":1803,"length1":23,"length2":27},{"diffs":[[0,"le,\n    "],[-1,"//"],[1,"    #"],[0," previou"]],"start1":1894,"start2":1894,"length1":18,"length2":21},{"diffs":[[0,"i’s\n    "],[-1,"//"],[1,"    #"],[0," theorem"]],"start1":1974,"start2":1974,"length1":18,"length2":21},{"diffs":[[0,"2).\n    "],[-1,"var"],[1,"   "],[0," dlambda"]],"start1":2052,"start2":2052,"length1":19,"length2":19},{"diffs":[[0," = lambd"],[-1,"a"],[0," - lambd"]],"start1":2071,"start2":2071,"length1":17,"length2":16},{"diffs":[[0," lambda0"],[-1,";"],[0,"\n    "],[-1,"var"],[1,"   "],[0," cosphi "]],"start1":2081,"start2":2081,"length1":25,"length2":24},{"diffs":[[0,"i = "],[-1,"Math."],[0,"cos(phi)"],[-1,";"],[0,"\n    "],[-1,"var"],[1,"   "],[0," sin"]],"start1":2103,"start2":2103,"length1":30,"length2":24},{"diffs":[[0,"i = "],[-1,"Math."],[0,"sin(phi)"],[-1,";"],[0,"\n    "],[-1,"var"],[1,"   "],[0," k ="]],"start1":2129,"start2":2129,"length1":30,"length2":24},{"diffs":[[0,"* sinphi"],[-1,";"],[0,"\n    "],[-1,"var"],[1,"   "],[0," u = cos"]],"start1":2162,"start2":2162,"length1":25,"length2":24},{"diffs":[[0,"i + k * "],[-1,"Math."],[0,"cos(dlam"]],"start1":2198,"start2":2198,"length1":21,"length2":16},{"diffs":[[0,"bda)"],[-1,";"],[0,"\n"],[1,"   "],[0,"    "],[-1,"var"],[0," v ="]],"start1":2214,"start2":2214,"length1":17,"length2":16},{"diffs":[[0,"v = k * "],[-1,"Math."],[0,"sin(dlam"]],"start1":2227,"start2":2227,"length1":21,"length2":16},{"diffs":[[0,"bda)"],[-1,";"],[0,"\n"],[1,"  "],[0,"    "],[1,"  "],[0,"area += "],[-1,"Math."],[0,"atan"]],"start1":2243,"start2":2243,"length1":27,"length2":25},{"diffs":[[0,", u)"],[-1,";\n\n"],[1,"\n   "],[0,"    "],[-1,"//"],[0," "],[1,"#"],[0,"Adva"]],"start1":2271,"start2":2271,"length1":18,"length2":18},{"diffs":[[0," point.\n"],[1,"    "],[0,"    lamb"]],"start1":2305,"start2":2305,"length1":16,"length2":20},{"diffs":[[0,"ambd"],[-1,"a"],[0,";\n    "],[1,"    "],[0,"cosp"]],"start1":2332,"start2":2332,"length1":15,"length2":18},{"diffs":[[0,"cosphi;\n    "],[1,"    "],[0,"sinphi0 = si"]],"start1":2356,"start2":2356,"length1":24,"length2":28},{"diffs":[[0,"nphi;\n  "],[-1,"}\n\n"],[0,"  return"]],"start1":2384,"start2":2384,"length1":19,"length2":16},{"diffs":[[0,"* area;\n"],[-1,"}"],[0,"\n\nfuncti"]],"start1":2403,"start2":2403,"length1":17,"length2":16}]],"length":3579,"saved":false}
{"ts":1376683284477,"patch":[[{"diffs":[[0,"in(phi)\n"],[-1,"\n"],[0,"    for "]],"start1":1690,"start2":1690,"length1":17,"length2":16},{"diffs":[[0,"area;\n\n\n"],[-1,"function "],[1,"def sph"],[0,"absolute"]],"start1":2404,"start2":2404,"length1":25,"length2":23},{"diffs":[[0,"a(a)"],[-1," {\n"],[1,":\n "],[0,"  "],[1," "],[0,"return"],[-1," a < 0 ?"],[0," a +"]],"start1":2430,"start2":2430,"length1":27,"length2":20},{"diffs":[[0," pi "],[-1,": a;\n}"],[1,"if a < 0 else a\n"],[0,"\n\nfu"]],"start1":2454,"start2":2454,"length1":14,"length2":24}]],"length":3579,"saved":false}
{"ts":1376683329790,"patch":[[{"diffs":[[0,"n2,round"],[1,",atan"],[0,"\nsystems"]],"start1":36,"start2":36,"length1":16,"length2":21},{"diffs":[[0,"(t) {\n  "],[-1,"var"],[1," "],[0," a = dis"]],"start1":2502,"start2":2502,"length1":19,"length2":17},{"diffs":[[0,"[1]);\n  "],[-1,"var"],[1," "],[0," b = dis"]],"start1":2532,"start2":2532,"length1":19,"length2":17},{"diffs":[[0,"[2]);\n  "],[-1,"var"],[1," "],[0," c = dis"]],"start1":2562,"start2":2562,"length1":19,"length2":17},{"diffs":[[0,"[0]);\n  "],[-1,"var"],[1," "],[0," s = (a "]],"start1":2592,"start2":2592,"length1":19,"length2":17},{"diffs":[[0,"+ c) / 2"],[1,".0"],[0,";\n  "],[1," "],[1," "],[0,"return 4"]],"start1":2613,"start2":2613,"length1":20,"length2":24},{"diffs":[[0,"4 * "],[-1,"Math.atan(Math."],[1,"atan("],[0,"sqrt"]],"start1":2636,"start2":2636,"length1":23,"length2":13}]],"length":3570,"saved":false}
