{"ts":1376665128597,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1376665234631,"patch":[[{"diffs":[[1,"from types require types\r\n    stitch = require(\"./stitch-poles\"),\r\n    hashtable = require(\"./hashtable\"),\r\n    systems = require(\"./coordinate-systems\");"]],"start1":0,"start2":0,"length1":0,"length2":154}]],"length":154,"saved":false}
{"ts":1376665315671,"patch":[[{"diffs":[[0,"pes "],[-1,"require"],[1,"import"],[0," types\r\n"],[-1,"    stitch = require(\"./"],[1,"from stickpoles import "],[0,"sti"],[-1,"t"],[0,"ch"],[-1,"-poles\"),\r\n    hashtable = require(\"./hashtable\"),\r\n    systems = require(\"./coordinate-"],[1,"\r\nfrom hashtable import hashtable\r\nfrom coordinatesystems import "],[0,"systems"],[-1,"\");"],[1,"\r\n\r\n"]],"start1":7,"start2":7,"length1":147,"length2":122}]],"length":129,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376665564697,"patch":[[{"diffs":[[0,"tems\r\n\r\n"],[1,"e = 1e-6\r\n\r\ndef linesEqual(a, b):\r\n    n = len(a);\r\n    i = 0\r\n    if len(b) != n:\r\n        return False\r\n    while (i < n) {\r\n        if a[i] != b[i]:\r\n            return false;\r\n        i+=1\r\n    return true;\r\n\r\ndef pointCompare(a, b):\r\n    return a[0] - b[0] or a[1] - b[1]\r\n"]],"start1":121,"start2":121,"length1":8,"length2":286}]],"length":407,"saved":false}
{"ts":1376665578175,"patch":[[{"diffs":[[0,"ile "],[-1,"("],[0,"i < n"],[-1,") {"],[1,":"],[0,"\r\n  "]],"start1":241,"start2":241,"length1":17,"length2":14}]],"length":404,"saved":false}
{"ts":1376665591805,"patch":[[{"diffs":[[0," return "],[-1,"f"],[1,"F"],[0,"alse;\r\n "]],"start1":290,"start2":290,"length1":17,"length2":17},{"diffs":[[0," return "],[-1,"t"],[1,"T"],[0,"rue;\r\n\r\n"]],"start1":323,"start2":323,"length1":17,"length2":17}]],"length":404,"saved":false}
{"ts":1376668425296,"patch":[[{"diffs":[[0,"e = 1e-6\r\n\r\n"],[1,"def topology (objects, options=False):\r\n    Q = 1e4; // precision of quantization\r\n    id = lambda d:d['id']\r\n    def propertyTransform ():\r\n        pass\r\n    stitchPoles = True;\r\n    verbose = False;\r\n    emax = 0\r\n    coincidences\r\n    system = False\r\n    arcs = []\r\n\r\n    if type(options)==type({}):\r\n        if options.has_key('verbose'):\r\n            verbose = not not options['verbose']\r\n        if options.has_key('stitch-poles'):\r\n            stitchPoles = not not options[\"stitch-poles\"]\r\n        if options.has_key('coordinate-system'):\r\n            system = systems[options[\"coordinate-system\"]]\r\n        if options.has_key('quantization'):\r\n            Q = float(options[\"quantization\"])\r\n        if options.has_key('id'):\r\n            id = options['id']\r\n        if options.has_key('property-transform'):\r\n            propertyTransform = options[\"property-transform\"]\r\n\r\n    \r\n\r\n    \r\n"],[0,"def linesEqu"]],"start1":129,"start2":129,"length1":24,"length2":922}]],"length":1302,"saved":false}
{"ts":1376668438151,"patch":[[{"diffs":[[0,"e4; "],[-1,"//"],[1,"#"],[0," pre"]],"start1":190,"start2":190,"length1":10,"length2":9}]],"length":1301,"saved":false}
{"ts":1376668700494,"patch":[[{"diffs":[[0,"\r\n\r\n    "],[1,"coincidences = hashtable(Q * 10);\r\n    arcsByPoint = hashtable(Q * 10);\r\n    pointsByPoint = hashtable(Q * 10);"],[0,"\r\n\r\n    "]],"start1":1020,"start2":1020,"length1":16,"length2":127}]],"length":1412,"saved":false}
{"ts":1376668928815,"patch":[[{"diffs":[[0," 0\r\n"],[-1,"    coincidences\r\n"],[0,"    "]],"start1":352,"start2":352,"length1":26,"length2":8},{"diffs":[[0,"Q * 10);\r\n\r\n"],[1,"    def each(callback):\r\n        t = types(callback)\r\n        out = {}\r\n        for key in objects:\r\n            out[key] = t.object(objects[key])\r\n            if not out[key]:\r\n                out[key]={}\r\n        return out\r\n\r\n    \r\n"],[0,"    \r\ndef li"]],"start1":1113,"start2":1113,"length1":24,"length2":259}]],"length":1629,"saved":false}
{"ts":1376669321097,"patch":[[{"diffs":[[0,"s = []\r\n"],[1,"    x0=y0=x1=y1=kx=ky=False"],[0,"\r\n    if"]],"start1":383,"start2":383,"length1":16,"length2":43},{"diffs":[[0,"turn out\r\n\r\n"],[1,"    def bound():\r\n        [x0,x1]=[y0,y1]=[float('inf'),-float('inf')]\r\n        def pointFunc (point) {\r\n            x = point[0]\r\n            y = point[1]\r\n            if x < x0:\r\n                x0 = x;\r\n            if x > x1:\r\n                x1 = x;\r\n            if y < y0:\r\n                y0 = y;\r\n            if y > y1:\r\n                y1 = y;\r\n        each({'point':pointFunc })\r\n"],[0,"    \r\n    \r\n"]],"start1":1369,"start2":1369,"length1":24,"length2":413}]],"length":2045,"saved":false}
{"ts":1376669334586,"patch":[[{"diffs":[[0," (point)"],[-1," {"],[1,":"],[0,"\r\n      "]],"start1":1474,"start2":1474,"length1":18,"length2":17},{"diffs":[[0,"ointFunc"],[-1," "],[0,"})\r\n    "]],"start1":1756,"start2":1756,"length1":17,"length2":16}]],"length":2043,"saved":false}
{"ts":1376669543324,"patch":[[{"diffs":[[0,"})\r\n    "],[1,"bound()\r\n    \r\n    oversize = x0 < -180 - e or x1 > 180 + e or y0 < -90 - e or y1 > 90 + e"],[0,"\r\n    \r\n"]],"start1":1764,"start2":1764,"length1":16,"length2":106}]],"length":2133,"saved":false}
{"ts":1376669680808,"patch":[[{"diffs":[[0,"90 + e\r\n"],[1,"    if not system:\r\n        if oversize:\r\n            system = systems[\"cartesian\"]\r\n        else:\r\n            system = systems[\"spherical\"]\r\n        system = systems[oversize ? \"cartesian\" : \"spherical\"];\r\n        if type(options)==type({}):\r\n            options[\"coordinate-system\"] = syste['name']\r\n    \r\n"],[0,"    \r\nde"]],"start1":1856,"start2":1856,"length1":16,"length2":325}]],"length":2442,"saved":false}
{"ts":1376669697193,"patch":[[{"diffs":[[0,"\"]\r\n"],[-1,"        system = systems[oversize ? \"cartesian\" : \"spherical\"];\r\n"],[0,"    "]],"start1":2003,"start2":2003,"length1":73,"length2":8}]],"length":2377,"saved":false}
{"ts":1376669712733,"patch":[[{"diffs":[[0," = syste"],[1,"m"],[0,"['name']"]],"start1":2084,"start2":2084,"length1":16,"length2":17}]],"length":2378,"saved":false}
{"ts":1376669957865,"patch":[[{"diffs":[[0,"name']\r\n    "],[1,"if system == systems['spherical']:\r\n        if oversize:\r\n            raise Exception(\"spherical coordinates outside of [±180°, ±90°]\")\r\n    }\r\n    if (stitchPoles) {\r\n      stitch(objects);\r\n      bound();\r\n    }"],[0,"\r\n    \r\ndef "]],"start1":2095,"start2":2095,"length1":24,"length2":237}]],"length":2591,"saved":false}
{"ts":1376670246071,"patch":[[{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    if "],[-1,"("],[0,"stit"]],"start1":2244,"start2":2244,"length1":19,"length2":15},{"diffs":[[0,"oles"],[-1,") {\r\n"],[1,":\r\n      "],[0,"    "]],"start1":2262,"start2":2262,"length1":13,"length2":17},{"diffs":[[0,"objects)"],[-1,";"],[0,"\r\n"],[1,"      "],[0,"      bo"]],"start1":2288,"start2":2288,"length1":19,"length2":24},{"diffs":[[0,"nd()"],[-1,";"],[0,"\r\n"],[-1,"    }"],[0,"\r\n  "]],"start1":2313,"start2":2313,"length1":16,"length2":10}]],"length":2590,"saved":false}
{"ts":1376670264020,"patch":[[{"diffs":[[0,"port sti"],[1,"t"],[0,"ch\r\nfrom"]],"start1":43,"start2":43,"length1":16,"length2":17},{"diffs":[[0,"ception("],[1,"u"],[0,"\"spheric"]],"start1":2186,"start2":2186,"length1":16,"length2":17}]],"length":2592,"saved":false}
{"ts":1376670382669,"patch":[[{"diffs":[[0,"bound()\r"],[1,"\n        if x0 < -180 + e:\r\n            x0 = -180\r\n        if x1 > 180 - e:\r\n            x1 = 180\r\n        if y0 < -90 + e:\r\n            y0 = -90\r\n        if y1 > 90 - e:\r\n            y1 = 90;\r"],[0,"\n\r\n    \r"]],"start1":2312,"start2":2312,"length1":16,"length2":209}]],"length":2785,"saved":false}
{"ts":1376670581256,"patch":[[{"diffs":[[0," = 1e-6\r"],[1,"\ndef isInfinit(n):\r\n    return abs(n)==float('inf')\r"],[0,"\n\r\ndef t"]],"start1":131,"start2":131,"length1":16,"length2":68},{"diffs":[[0," = 90;\r\n"],[1,"    if isInfinit(x0):\r\n        x0 = 0\r\n    if isInfinit(x1):\r\n        x1 = 0;\r\n\r\n    if isInfinit(y0):\r\n        y0 = 0;\r\n    if isInfinit(y1):\r\n        y1 = 0;"],[0,"\r\n    \r\n"]],"start1":2558,"start2":2558,"length1":16,"length2":175}]],"length":2996,"saved":false}
{"ts":1376670788056,"patch":[[{"diffs":[[0,"0;\r\n    "],[1,"if Q:\r\n        kx = (Q - 1) / (x1 - x0) if x1 - x0 else 1\r\n        ky = (Q - 1) / (y1 - y0) if y1 - y0 else 1;\r\n    else:\r\n        print(\"quantization: disabled; assuming inputs already quantized\")\r\n        Q = x1 + 1;\r\n        kx = ky = 1;\r\n        x0 = y0 = 0;\r\n"],[0,"\r\ndef li"]],"start1":2723,"start2":2723,"length1":16,"length2":280}]],"length":3260,"saved":false}
{"ts":1376670876194,"patch":[[{"diffs":[[0,"0 = 0;\r\n"],[1,"      if verbose:\r\n        qx0 = Math.round((x0 - x0) * kx) * (1 / kx) + x0;\r\n        qx1 = Math.round((x1 - x0) * kx) * (1 / kx) + x0;\r\n        qy0 = Math.round((y0 - y0) * ky) * (1 / ky) + y0;\r\n        qy1 = Math.round((y1 - y0) * ky) * (1 / ky) + y0;\r\n       print(\"quantization: bounds \" + str(qx0)+str(qy0)+str(qx1)+str(qy1) + \" (\" + system.name + \")\");\r\n  }"],[0,"\r\ndef li"]],"start1":2987,"start2":2987,"length1":16,"length2":379}]],"length":3623,"saved":false}
{"ts":1376670940490,"patch":[[{"diffs":[[0,"0;\r\n    "],[-1,"  "],[0,"if verbo"]],"start1":2991,"start2":2991,"length1":18,"length2":16},{"diffs":[[0,"      qx0 = "],[-1,"Math."],[0,"round((x0 - "]],"start1":3014,"start2":3014,"length1":29,"length2":24},{"diffs":[[0," * (1 / kx) + x0"],[-1,";"],[0,"\r\n        qx1 = "]],"start1":3047,"start2":3047,"length1":33,"length2":32},{"diffs":[[0,"      qx1 = "],[-1,"Math."],[0,"round((x1 - "]],"start1":3067,"start2":3067,"length1":29,"length2":24},{"diffs":[[0,"kx) + x0"],[-1,";"],[0,"\r\n      "]],"start1":3108,"start2":3108,"length1":17,"length2":16},{"diffs":[[0,"  qy0 = "],[-1,"Math."],[0,"round((y"]],"start1":3124,"start2":3124,"length1":21,"length2":16},{"diffs":[[0," * (1 / ky) + y0"],[-1,";"],[0,"\r\n        qy1 = "]],"start1":3153,"start2":3153,"length1":33,"length2":32},{"diffs":[[0,"1 = "],[-1,"Math."],[0,"roun"]],"start1":3181,"start2":3181,"length1":13,"length2":8},{"diffs":[[0,"ky) + y0"],[-1,";"],[0,"\r\n"],[1," "],[0,"       p"]],"start1":3214,"start2":3214,"length1":19,"length2":19}]],"length":3598,"saved":false}
{"ts":1376670949558,"patch":[[{"diffs":[[0,");\r\n"],[-1,"  }"],[1,"\r\n\r\n"],[0,"\r\nde"]],"start1":3326,"start2":3326,"length1":11,"length2":12}]],"length":3599,"saved":false}
{"ts":1376671200318,"patch":[[{"diffs":[[0,"e + \")\")"],[-1,";"],[0,"\r\n"],[1,"    def newPointFunc(point):\r\n        x1 = point[0];\r\n        y1 = point[1];\r\n        x = Math.round((x1 - x0) * kx);\r\n        y = Math.round((y1 - y0) * ky);\r\n        ee = system.distance(x1, y1, x / kx + x0, y / ky + y0);\r\n        if ee > emax:\r\n            emax = ee;\r\n        point[0] = x;\r\n        point[1] = y;\r\n    }\r\n    each({\"point\":newPointFunc})"],[0,"\r\n\r\n\r\nde"]],"start1":3319,"start2":3319,"length1":19,"length2":375}]],"length":3955,"saved":false}
{"ts":1376671203290,"patch":[[{"diffs":[[0,"y;\r\n"],[-1,"    }"],[0,"\r\n  "]],"start1":3643,"start2":3643,"length1":13,"length2":8}]],"length":3950,"saved":false}
{"ts":1376671225332,"patch":[[{"diffs":[[0,"point[0]"],[-1,";"],[0,"\r\n      "]],"start1":3372,"start2":3372,"length1":17,"length2":16},{"diffs":[[0,"point[1]"],[-1,";"],[0,"\r\n      "]],"start1":3395,"start2":3395,"length1":17,"length2":16},{"diffs":[[0,"    x = "],[-1,"Math."],[0,"round((x"]],"start1":3409,"start2":3409,"length1":21,"length2":16},{"diffs":[[0,"0) * kx)"],[-1,";"],[0,"\r\n      "]],"start1":3430,"start2":3430,"length1":17,"length2":16},{"diffs":[[0,"y = "],[-1,"Math."],[0,"roun"]],"start1":3448,"start2":3448,"length1":13,"length2":8},{"diffs":[[0,"0) * ky)"],[-1,";"],[0,"\r\n      "]],"start1":3465,"start2":3465,"length1":17,"length2":16},{"diffs":[[0,"ky + y0)"],[-1,";"],[0,"\r\n      "]],"start1":3529,"start2":3529,"length1":17,"length2":16},{"diffs":[[0,"max = ee"],[-1,";"],[0,"\r\n      "]],"start1":3575,"start2":3575,"length1":17,"length2":16},{"diffs":[[0,"point[0] = x"],[-1,";"],[0,"\r\n        po"]],"start1":3593,"start2":3593,"length1":25,"length2":24},{"diffs":[[0,"t[1] = y"],[-1,";"],[0,"\r\n\r\n    "]],"start1":3619,"start2":3619,"length1":17,"length2":16}]],"length":3932,"saved":false}
{"ts":1376671602623,"patch":[[{"diffs":[[0,"Func})\r\n"],[1,"    def newLineFunc(line):\r\n        i = 0\r\n        n = len(line)\r\n        while i < n:\r\n            lines = coincidences.get(line[i])\r\n            if not line in lines:\r\n                lines.append(line)\r\n            i+=0\r\n    each({'line':newLineFunc})\r\n\r\n    #Convert features to geometries, and stitch together arcs.\r\n    objects = each({\r\n    Feature: function(feature) {\r\n      var geometry = feature.geometry;\r\n      if (feature.geometry == null) {\r\n        geometry = {};\r\n      }\r\n      if (\"id\" in feature) {\r\n        geometry.id = feature.id;\r\n      }\r\n      if (\"properties\" in feature) {\r\n        geometry.properties = feature.properties;\r\n      }\r\n      return this.geometry(geometry);\r\n    },\r\n\r\n    FeatureCollection: function(collection) {\r\n      collection.type = \"GeometryCollection\";\r\n      collection.geometries = collection.features.map(this.Feature, this);\r\n      delete collection.features;\r\n      return collection;\r\n    },\r\n\r\n    GeometryCollection: function(collection) {\r\n      collection.geometries = collection.geometries.map(this.geometry, this);\r\n    },\r\n\r\n    MultiPolygon: function(multiPolygon) {\r\n      multiPolygon.arcs = multiPolygon.coordinates.map(polygon);\r\n    },\r\n\r\n    Polygon: function(polygon) {\r\n      polygon.arcs = polygon.coordinates.map(lineClosed);\r\n    },\r\n\r\n    MultiLineString: function(multiLineString) {\r\n      multiLineString.arcs = multiLineString.coordinates.map(lineOpen);\r\n    },\r\n\r\n    LineString: function(lineString) {\r\n      lineString.arcs = lineOpen(lineString.coordinates);\r\n    },\r\n\r\n    geometry: function(geometry) {\r\n      if (geometry == null) {\r\n        geometry = {};\r\n      } else {\r\n        this.defaults.geometry.call(this, geometry);\r\n      }\r\n\r\n      geometry.id = id(geometry);\r\n      if (geometry.id == null) {\r\n        delete geometry.id;\r\n      }\r\n      var properties0 = geometry.properties;\r\n      if (properties0) {\r\n        var properties1 = {};\r\n        delete geometry.properties;\r\n        for (var key0 in properties0) {\r\n          if (propertyTransform(properties1, key0, properties0[key0])) {\r\n            geometry.properties = properties1;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (geometry.arcs) {\r\n        delete geometry.coordinates;\r\n      }\r\n      return geometry;\r\n    }\r\n  });\r\n\r\n  coincidences = arcsByPoint = pointsByPoint = null;\r\n\r\n  function polygon(poly) {\r\n    return poly.map(lineClosed);\r\n  }\r\n\r\n  function lineClosed(points) {\r\n    return line(points, false);\r\n  }\r\n\r\n  function lineOpen(points) {\r\n    return line(points, true);\r\n  }\r\n\r\n  function line(points, open) {\r\n    var lineArcs = [];\r\n    var n = points.length;\r\n    var a = [];\r\n    var k = 0;\r\n    var p;\r\n    var point;\r\n    var t;\r\n    var tInP;\r\n    var pInT;\r\n    var i;\r\n\r\n    if (!open) {\r\n      points.pop();\r\n      --n;\r\n    }\r\n\r\n    // For closed lines, rotate to find a suitable shared starting point.\r\n    for (; k < n; ++k) {\r\n      t = coincidences.peek(points[k]);\r\n      if (open) {\r\n        break;\r\n      }\r\n      if (p && !linesEqual(p, t)) {\r\n        tInP = t.every(function(line) { return p.indexOf(line) >= 0; });\r\n        pInT = p.every(function(line) { return t.indexOf(line) >= 0; });\r\n        if (tInP && !pInT) {\r\n          --k;\r\n        }\r\n        break;\r\n      }\r\n      p = t;\r\n    }\r\n    // If no shared starting point is found for closed lines, rotate to minimum.\r\n    if (k === n && p.length > 1) {\r\n      var point0 = points[0];\r\n      i = 0;\r\n      for (k = 0; i < n; ++i) {\r\n        point = points[i];\r\n        if (pointCompare(point0, point) > 0) {\r\n          point0 = point;\r\n          k = i;\r\n        }\r\n      }\r\n    }\r\n    i = 0;\r\n    for (var m = open ? n : n + 1; i < m; ++i) {\r\n      point = points[(i + k) % n];\r\n      p = coincidences.peek(point);\r\n      if (!linesEqual(p, t)) {\r\n        tInP = t.every(function(line) { return p.indexOf(line) >= 0; });\r\n        pInT = p.every(function(line) { return t.indexOf(line) >= 0; });\r\n        if (tInP) {\r\n          a.push(point);\r\n        }\r\n        arc(a);\r\n        if (!tInP && !pInT) {\r\n          arc([a[a.length - 1], point]);\r\n        }\r\n        if (pInT) {\r\n          a = [a[a.length - 1]];\r\n        } else {\r\n          a = [];\r\n        }\r\n      }\r\n      if (!a.length || pointCompare(a[a.length - 1], point)) {\r\n        a.push(point); // skip duplicate points\r\n      }\r\n      t = p;\r\n    }\r\n\r\n    arc(a, true);\r\n\r\n    function arc(a, last) {\r\n      var n = a.length;\r\n      var point;\r\n      if (last && !lineArcs.length && n === 1) {\r\n        point = a[0];\r\n        var index = pointsByPoint.get(point);\r\n        if (index.length) {\r\n          lineArcs.push(index[0]);\r\n        } else {\r\n          lineArcs.push(index[0] = arcs.length);\r\n          arcs.push(a);\r\n        }\r\n      } else if (n > 1) {\r\n        var a0 = a[0];\r\n        var a1 = a[n - 1];\r\n        point = pointCompare(a0, a1) < 0 ? a0 : a1;\r\n        var pointArcs = arcsByPoint.get(point);\r\n        if (pointArcs.some(matchForward)) {\r\n          return;\r\n        }\r\n        if (pointArcs.some(matchBackward)) {\r\n          return;\r\n        }\r\n        pointArcs.push(a);\r\n        lineArcs.push(a.index = arcs.length);\r\n        arcs.push(a);\r\n      }\r\n\r\n      function matchForward(b) {\r\n        var i = -1;\r\n        if (b.length !== n) {\r\n          return false;\r\n        }\r\n        while (++i < n) {\r\n          if (pointCompare(a[i], b[i])) {\r\n            return false;\r\n          }\r\n        }\r\n        lineArcs.push(b.index);\r\n        return true;\r\n      }\r\n\r\n      function matchBackward(b) {\r\n        var i = -1;\r\n        if (b.length !== n) {\r\n          return false;\r\n        }\r\n        while (++i < n) {\r\n          if (pointCompare(a[i], b[n - i - 1])) {\r\n            return false;\r\n          }\r\n        }\r\n        lineArcs.push(~b.index);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return lineArcs;\r\n  }\r\n\r\n  return {\r\n    type: \"Topology\",\r\n    bbox: [x0, y0, x1, y1],\r\n    transform: {\r\n      scale: [1 / kx, 1 / ky],\r\n      translate: [x0, y0]\r\n    },\r\n    objects: objects,\r\n    arcs: arcs.map(function(arc) {\r\n      var i = 0;\r\n      var n = arc.length;\r\n      var point = arc[0];\r\n      var x1 = point[0];\r\n      var x2;\r\n      var dx;\r\n      var y1 = point[1];\r\n      var y2;\r\n      var dy;\r\n      var points = [[x1, y1]];\r\n      while (++i < n) {\r\n        point = arc[i];\r\n        x2 = point[0];\r\n        y2 = point[1];\r\n        dx = x2 - x1;\r\n        dy = y2 - y1;\r\n        if (dx || dy) {\r\n          points.push([dx, dy]);\r\n          x1 = x2;\r\n          y1 = y2;\r\n        }\r\n      }\r\n      return points;\r\n    })\r\n  };\r\n};\r\n\r\n###end!!!"],[0,"\r\n\r\ndef "]],"start1":3657,"start2":3657,"length1":16,"length2":6606}]],"length":10522,"saved":false}
{"ts":1376671848311,"patch":[[{"diffs":[[0,"    "],[-1,"objects = each({\r\n    Feature: function("],[1,"def newFeatureFunc (self,"],[0,"feature)"],[-1," {"],[1,":"],[0,"\r\n      "],[-1,"var"],[1," "],[0," geo"]],"start1":3987,"start2":3987,"length1":69,"length2":51},{"diffs":[[0,"ture"],[-1,"."],[1,"[\""],[0,"geometry"],[-1,";\r\n"],[1,"\"]\r\n  "],[0,"    "]],"start1":4049,"start2":4049,"length1":20,"length2":24},{"diffs":[[0," if "],[-1,"("],[0,"feature"],[-1,"."],[1,"['"],[0,"geometry"],[1,"']"],[0," == null"],[-1,") {\r\n"],[1,"\r\n    "],[0,"    "]],"start1":4074,"start2":4074,"length1":38,"length2":41},{"diffs":[[0,"    "],[-1,"}\r\n      if (\"id\" in feature) {\r\n"],[1,"  if \"feature.has_key('id'):\r\n    "],[0,"    "]],"start1":4137,"start2":4137,"length1":41,"length2":42},{"diffs":[[0,"geometry"],[-1,".id"],[1,"['id']"],[0," = featu"]],"start1":4183,"start2":4183,"length1":19,"length2":22},{"diffs":[[0,"ture"],[-1,".id;\r\n      }\r\n"],[1,"['id']\r\n   "],[0,"     "],[-1," "],[0,"if "],[-1,"(\"properties\" in feature) {\r\n"],[1,"\"feature.has_key('properties'):\r\n  "],[0,"        "],[1,"  "],[0,"geometry"],[-1,"."],[1,"['"],[0,"prop"]],"start1":4203,"start2":4203,"length1":78,"length2":82},{"diffs":[[0,"operties"],[1,"']"],[0," = featu"]],"start1":4283,"start2":4283,"length1":16,"length2":18},{"diffs":[[0," feature"],[-1,"."],[1,"['"],[0,"properti"]],"start1":4295,"start2":4295,"length1":17,"length2":18},{"diffs":[[0,"operties"],[-1,";"],[1,"']"],[0,"\r\n  "],[-1,"    }\r\n"],[0,"      re"]],"start1":4307,"start2":4307,"length1":28,"length2":22},{"diffs":[[0," return "],[-1,"this"],[1,"self"],[0,".geometr"]],"start1":4326,"start2":4326,"length1":20,"length2":20},{"diffs":[[0,"geometry);\r\n"],[1,"\r\n"],[0,"    "],[-1,"}"],[1,"objects = each({\r\n        'Feature':newFeatureFunc"],[0,",\r\n\r\n    Fea"]],"start1":4348,"start2":4348,"length1":29,"length2":80}]],"length":10567,"saved":false}
{"ts":1376672380500,"patch":[[{"diffs":[[0,"ry'] == "],[-1,"null"],[1,"None:"],[0,"\r\n      "]],"start1":4093,"start2":4093,"length1":20,"length2":21},{"diffs":[[0,");\r\n"],[-1,"\r\n"],[0,"    "],[-1,"objects = each({\r\n        'Feature':newFeatureFunc,\r\n\r\n    FeatureCollection: function("],[1,"def newFeatureCollectionFunc(self,"],[0,"coll"]],"start1":4357,"start2":4357,"length1":101,"length2":46},{"diffs":[[0,",collection)"],[-1," {"],[1,":"],[0,"\r\n      "],[1,"  "],[0,"collection.t"]],"start1":4398,"start2":4398,"length1":34,"length2":35},{"diffs":[[0,"tion"],[-1,"."],[1,"['"],[0,"type"],[1,"']"],[0," = \""]],"start1":4427,"start2":4427,"length1":13,"length2":16},{"diffs":[[0,"ection\";\r\n      "],[1,"  "],[0,"collection.geome"]],"start1":4455,"start2":4455,"length1":32,"length2":34},{"diffs":[[0,"      collection"],[-1,"."],[1,"['"],[0,"geometries = col"]],"start1":4467,"start2":4467,"length1":33,"length2":34},{"diffs":[[0,"tion['geometries"],[1,"']"],[0," = "],[1,"map("],[0,"collection.featu"]],"start1":4479,"start2":4479,"length1":35,"length2":41},{"diffs":[[0,"tion"],[-1,"."],[1,"['"],[0,"features"],[-1,".map(this.Feature, this);"],[1,"'],self.Feature)"],[0,"\r\n      "],[1,"  "],[0,"del"],[-1,"ete"],[0," col"]],"start1":4510,"start2":4510,"length1":56,"length2":47},{"diffs":[[0,"features"],[-1,";"],[0,"\r\n"],[1,"  "],[0,"      re"]],"start1":4565,"start2":4565,"length1":19,"length2":20},{"diffs":[[0,"llection"],[-1,";"],[0,"\r\n    "],[-1,"},\r\n\r\n    "],[1,"def new"],[0,"Geometry"]],"start1":4592,"start2":4592,"length1":33,"length2":29},{"diffs":[[0,"llection"],[-1,": "],[0,"func"],[-1,"tion("],[1,"(self,"],[0,"collecti"]],"start1":4623,"start2":4623,"length1":27,"length2":26},{"diffs":[[0,"lection)"],[-1," {\r\n"],[1,":\r\n  "],[0,"      co"]],"start1":4644,"start2":4644,"length1":20,"length2":21},{"diffs":[[0,"      collection"],[-1,"."],[1,"['"],[0,"geometries = col"]],"start1":4657,"start2":4657,"length1":33,"length2":34},{"diffs":[[0,"ometries"],[1,"']"],[0," = "],[1,"map("],[0,"collecti"]],"start1":4677,"start2":4677,"length1":19,"length2":25},{"diffs":[[0,"llection"],[-1,"."],[1,"['"],[0,"geometri"]],"start1":4696,"start2":4696,"length1":17,"length2":18},{"diffs":[[0,"ries"],[-1,".map(this.geometry, this);\r\n    },\r\n\r\n    "],[1,"'],self.geometry)\r\n    def new"],[0,"Mult"]],"start1":4712,"start2":4712,"length1":50,"length2":38},{"diffs":[[0,"iPolygon"],[-1,": "],[0,"func"],[-1,"tion("],[1,"(self,"],[0,"multiPol"]],"start1":4750,"start2":4750,"length1":27,"length2":26},{"diffs":[[0,"Polygon)"],[-1," {"],[1,":"],[0,"\r\n      "],[1,"  "],[0,"multiPol"]],"start1":4773,"start2":4773,"length1":26,"length2":27},{"diffs":[[0,"iPolygon"],[-1,"."],[1,"['"],[0,"arcs"],[1,"']"],[0," = "],[1,"map("],[0,"multiPol"]],"start1":4796,"start2":4796,"length1":24,"length2":31},{"diffs":[[0,"multiPolygon"],[-1,"."],[1,"['"],[0,"coordinates."]],"start1":4819,"start2":4819,"length1":25,"length2":26},{"diffs":[[0,"ates"],[-1,".map("],[1,"'],"],[0,"polygon)"],[-1,";"],[0,"\r\n    "],[-1,"},\r\n\r\n    "],[1,"def new"],[0,"Polygon"],[-1,": "],[0,"func"],[-1,"tion"],[0,"(pol"]],"start1":4840,"start2":4840,"length1":55,"length2":43},{"diffs":[[0,"gon)"],[-1," {"],[0,"\r\n      "],[1,"   "],[0,"polygon"],[-1,"."],[1,"['"],[0,"arcs"],[1,"']"],[0," = "],[1,"map("],[0,"polygon"],[-1,"."],[1,"['"],[0,"coor"]],"start1":4884,"start2":4884,"length1":41,"length2":50},{"diffs":[[0,"'coordinates"],[-1,".map("],[1,"'],"],[0,"lineClosed);"]],"start1":4929,"start2":4929,"length1":29,"length2":27},{"diffs":[[0,"eClosed)"],[-1,";\r\n    },"],[0,"\r\n\r\n    "]],"start1":4947,"start2":4947,"length1":25,"length2":16},{"diffs":[[0,"\n    }\r\n"],[1,"    objects = each({\r\n        'Feature':newFeatureFunc,\r\n        'FeatureCollection': newFeatureCollectionFunc,\r\n        'GeometryCollection': newGeometryCollectionfunc,\r\n        'MultiPolygon': newMultiPolygonfunc,\r\n        'Polygon':newPolygonfunc,\r\n        'MultiLineString': newMultiLineStringfunc,\r\n        'LineString': newLineStringfunc,\r\n        'geometry': newGeometryfunc\r\n  "],[0,"  });\r\n\r"]],"start1":5916,"start2":5916,"length1":16,"length2":401}]],"length":10889,"saved":false}
{"ts":1376672769111,"patch":[[{"diffs":[[0,"gonfunc("],[1,"self,"],[0,"polygon)"]],"start1":4872,"start2":4872,"length1":16,"length2":21},{"diffs":[[0,"f,polygon)\r\n"],[-1,""],[0,"         pol"]],"start1":4883,"start2":4883,"length1":24,"length2":24},{"diffs":[[0,"losed)\r\n"],[-1,"\r\n"],[0,"    "],[1,"def new"],[0,"MultiLin"]],"start1":4954,"start2":4954,"length1":22,"length2":27},{"diffs":[[0,"neString"],[-1,": "],[0,"func"],[-1,"tion("],[1,"(self,"],[0,"multiLin"]],"start1":4980,"start2":4980,"length1":27,"length2":26},{"diffs":[[0,"eString)"],[-1," {"],[1,":"],[0,"\r\n      "],[1,"  "],[0,"multiLin"]],"start1":5006,"start2":5006,"length1":26,"length2":27},{"diffs":[[0,"neString"],[-1,"."],[1,"['"],[0,"arcs"],[1,"']"],[0," = "],[1,"map("],[0,"multiLin"]],"start1":5032,"start2":5032,"length1":24,"length2":31},{"diffs":[[0,"(multiLineString"],[-1,"."],[1,"['"],[0,"coordinates.map("]],"start1":5054,"start2":5054,"length1":33,"length2":34},{"diffs":[[0,"rdinates"],[-1,".map("],[1,"'],"],[0,"lineOpen"]],"start1":5075,"start2":5075,"length1":21,"length2":19},{"diffs":[[0,"ineOpen)"],[-1,";"],[0,"\r\n    "],[-1,"},\r\n\r\n    "],[1,"def new"],[0,"LineStri"]],"start1":5087,"start2":5087,"length1":33,"length2":29},{"diffs":[[0,"neString"],[-1,": "],[0,"func"],[-1,"tion("],[1,"(self,"],[0,"lineStri"]],"start1":5110,"start2":5110,"length1":27,"length2":26},{"diffs":[[0,"eString)"],[-1," {\r\n"],[1,":\r\n  "],[0,"      li"]],"start1":5131,"start2":5131,"length1":20,"length2":21},{"diffs":[[0,"neString"],[-1,"."],[1,"['"],[0,"arcs"],[1,"']"],[0," = lineO"]],"start1":5152,"start2":5152,"length1":21,"length2":24},{"diffs":[[0,"neString"],[-1,"."],[1,"['"],[0,"coordina"]],"start1":5182,"start2":5182,"length1":17,"length2":18},{"diffs":[[0,"ates"],[1,"']"],[0,")"],[-1,";"],[0,"\r\n    "],[-1,"},\r\n\r\n    "],[1,"def new"],[0,"geometry"],[-1,": "],[0,"func"],[-1,"tion("],[1,"(self,"],[0,"geom"]],"start1":5199,"start2":5199,"length1":45,"length2":42},{"diffs":[[0,"eometry)"],[-1," {\r\n"],[1,":\r\n  "],[0,"      if"]],"start1":5238,"start2":5238,"length1":20,"length2":21},{"diffs":[[0,"y):\r\n        if "],[-1,"("],[0,"geometry == null"]],"start1":5244,"start2":5244,"length1":33,"length2":32},{"diffs":[[0,"geometry == "],[-1,"null) {\r\n"],[1,"None:\r\n    "],[0,"        geom"]],"start1":5260,"start2":5260,"length1":33,"length2":35},{"diffs":[[0,"    "],[1," "],[-1,"}"],[0," else"],[-1," {\r\n"],[1,":\r\n  "],[0,"        "],[-1,"this"],[1,"  self"],[0,".def"]],"start1":5309,"start2":5309,"length1":30,"length2":33},{"diffs":[[0,"etry"],[-1,".call(this, "],[1,"("],[0,"geom"]],"start1":5352,"start2":5352,"length1":20,"length2":9},{"diffs":[[0,"try)"],[-1,";"],[0,"\r\n    "],[-1,"  "],[-1,"}\r\n\r\n"],[0,"    "],[-1,"  "],[0,"geometry"],[-1,".id"],[1,"['id']"],[0," = i"]],"start1":5362,"start2":5362,"length1":39,"length2":32},{"diffs":[[0,"id(geometry)"],[-1,";"],[0,"\r\n"],[1,"  "],[0,"      if (ge"]],"start1":5393,"start2":5393,"length1":27,"length2":28},{"diffs":[[0," if "],[-1,"("],[0,"geometry"],[-1,".id == null) {\r\n"],[1,"['id'] == None:\r\n   "],[0,"        "],[1," "],[0,"del"],[-1,"ete"],[0," geo"]],"start1":5414,"start2":5414,"length1":47,"length2":48},{"diffs":[[0,"etry"],[-1,".id;"],[1,"['id']"],[0,"\r\n     "],[-1," "],[-1,"}\r\n      var"],[1,"  "],[0," pro"]],"start1":5463,"start2":5463,"length1":32,"length2":23},{"diffs":[[0,"y.properties"],[-1,";"],[0,"\r\n"],[1,"  "],[0,"      if (pr"]],"start1":5504,"start2":5504,"length1":27,"length2":28},{"diffs":[[0,"\n        if "],[-1,"("],[0,"properties0)"]],"start1":5517,"start2":5517,"length1":25,"length2":24},{"diffs":[[0,"  if properties0"],[-1,") {"],[1,":"],[0,"\r\n        var pr"]],"start1":5524,"start2":5524,"length1":35,"length2":33},{"diffs":[[0,"        "],[-1,"var"],[1,"   "],[0," propert"]],"start1":5543,"start2":5543,"length1":19,"length2":19},{"diffs":[[0,"erties1 = {}"],[-1,";"],[0,"\r\n        de"]],"start1":5559,"start2":5559,"length1":25,"length2":24},{"diffs":[[0,"1 = {}\r\n        "],[1,"   "],[1," "],[0,"del"],[-1,"ete"],[0," geometry.proper"]],"start1":5565,"start2":5565,"length1":38,"length2":39},{"diffs":[[0,"    del geometry"],[-1,"."],[1,"['"],[0,"properties;\r\n   "]],"start1":5581,"start2":5581,"length1":33,"length2":34},{"diffs":[[0,"operties"],[-1,";"],[1,"']"],[0,"\r\n      "]],"start1":5601,"start2":5601,"length1":17,"length2":18},{"diffs":[[0,"        "],[1," "],[-1,"for (va"],[1,"   fo"],[0,"r key0 i"]],"start1":5613,"start2":5613,"length1":23,"length2":22},{"diffs":[[0,"perties0"],[-1,") {\r\n"],[1,":\r\n      "],[0,"        "]],"start1":5640,"start2":5640,"length1":21,"length2":25},{"diffs":[[0,"     if "],[-1,"("],[0,"property"]],"start1":5662,"start2":5662,"length1":17,"length2":16},{"diffs":[[0,"0[key0])"],[-1,") {\r\n"],[1,":\r\n        "],[0,"        "]],"start1":5717,"start2":5717,"length1":21,"length2":27},{"diffs":[[0,"        geometry"],[-1,"."],[1,"['"],[0,"properties = pro"]],"start1":5740,"start2":5740,"length1":33,"length2":34},{"diffs":[[0,"operties"],[1,"']"],[0," = prope"]],"start1":5760,"start2":5760,"length1":16,"length2":18},{"diffs":[[0,"ies1"],[-1,";"],[0,"\r\n     "],[-1,"   "],[-1,"  }\r\n        }\r\n      }\r\n\r\n   "],[0,"   if "],[-1,"("],[0,"geom"]],"start1":5780,"start2":5780,"length1":56,"length2":21},{"diffs":[[0,"try."],[1,"has_key('"],[0,"arcs"],[-1,") {"],[1,"'):"],[0,"\r\n  "]],"start1":5802,"start2":5802,"length1":15,"length2":24},{"diffs":[[0,"    "],[1,"    "],[0,"del"],[-1,"ete"],[0," geo"]],"start1":5828,"start2":5828,"length1":14,"length2":15},{"diffs":[[0,"geometry"],[-1,"."],[1,"['"],[0,"coordina"]],"start1":5840,"start2":5840,"length1":17,"length2":18},{"diffs":[[0,"rdinates"],[-1,";"],[1,"']"],[0,"\r\n  "],[-1,"    }\r\n"],[0,"      re"]],"start1":5853,"start2":5853,"length1":28,"length2":22},{"diffs":[[0,"metry;\r\n"],[-1,"    }\r\n"],[0,"    obje"]],"start1":5883,"start2":5883,"length1":23,"length2":16},{"diffs":[[0,"nc\r\n"],[1,""],[0,"    })"],[-1,";"],[0,"\r\n\r\n"]],"start1":6270,"start2":6270,"length1":15,"length2":14}]],"length":10855,"saved":false}
{"ts":1376672781214,"patch":[[{"diffs":[[0,"{};\r\n        if "],[-1,"\""],[0,"feature.has_key("]],"start1":4131,"start2":4131,"length1":33,"length2":32},{"diffs":[[0,"     if "],[-1,"\""],[0,"feature."]],"start1":4218,"start2":4218,"length1":17,"length2":16},{"diffs":[[0,"  })\r\n\r\n"],[1,"  "],[0,"  coinci"]],"start1":6274,"start2":6274,"length1":16,"length2":18}]],"length":10855,"saved":false}
{"ts":1376672813110,"patch":[[{"diffs":[[0,"elf,polygon)"],[1,":"],[0,"\r\n         p"]],"start1":4879,"start2":4879,"length1":24,"length2":25}]],"length":10856,"saved":false}
{"ts":1376675174477,"patch":[[{"diffs":[[0,"metries'] = map("],[1,"self.Feature,"],[0,"collection['feat"]],"start1":4486,"start2":4486,"length1":32,"length2":45},{"diffs":[[0,"es']"],[-1,",self.Feature"],[0,")\r\n "]],"start1":4533,"start2":4533,"length1":21,"length2":8},{"diffs":[[0,"] = map("],[1,"self.geometry,"],[0,"collecti"]],"start1":4684,"start2":4684,"length1":16,"length2":30},{"diffs":[[0,"es']"],[-1,",self.geometry"],[0,")\r\n "]],"start1":4726,"start2":4726,"length1":22,"length2":8},{"diffs":[[0,"rcs'] = map("],[1,"polygon,"],[0,"multiPolygon"]],"start1":4805,"start2":4805,"length1":24,"length2":32},{"diffs":[[0,"inates']"],[-1,",polygon"],[0,")\r\n    d"]],"start1":4844,"start2":4844,"length1":24,"length2":16},{"diffs":[[0,"rcs'] = map("],[1,"lineClosed,"],[0,"polygon['coo"]],"start1":4913,"start2":4913,"length1":24,"length2":35},{"diffs":[[0,"es']"],[-1,",lineClosed"],[0,")\r\n "]],"start1":4954,"start2":4954,"length1":19,"length2":8},{"diffs":[[0,"] = map("],[1,"lineOpen,"],[0,"multiLin"]],"start1":5046,"start2":5046,"length1":16,"length2":25},{"diffs":[[0,"es']"],[-1,",lineOpen"],[0,")\r\n "]],"start1":5089,"start2":5089,"length1":17,"length2":8},{"diffs":[[0,"t = "],[-1,"null;"],[1,"None"],[0,"\r\n\r\n  "],[-1,"function polygon(poly) {\r\n    return"],[1,"  polygon = lambda"],[0," poly"],[-1,"."],[1,":"],[0,"map("]],"start1":6328,"start2":6328,"length1":61,"length2":42},{"diffs":[[0,"osed"],[-1,");\r\n  }\r\n\r\n  function lineClosed(points) {\r\n    return "],[1,",poly)\r\n    lineClosed = lambda points:"],[0,"line"]],"start1":6376,"start2":6376,"length1":63,"length2":47},{"diffs":[[0,"nts,"],[-1," f"],[1,"F"],[0,"alse)"],[-1,";"],[0,"\r\n  "],[-1,"}\r\n\r\n  function lineOpen(points) {\r\n    return "],[1,"  lineOpen = lambda points:"],[0,"line"]],"start1":6427,"start2":6427,"length1":67,"length2":45},{"diffs":[[0,"nts,"],[-1," t"],[1,"T"],[0,"rue)"],[-1,";"],[0,"\r\n  "],[-1,"}\r\n\r\n  function"],[1,"  def"],[0," lin"]],"start1":6476,"start2":6476,"length1":34,"length2":22},{"diffs":[[0,"pen)"],[-1," {"],[1,":"],[0,"\r\n    "],[-1,"var"],[1,"   "],[0," lin"]],"start1":6509,"start2":6509,"length1":19,"length2":18},{"diffs":[[0,"    "],[-1,"var"],[1,"   "],[0," n = "],[1,"len("],[0,"points"],[-1,".length;"],[1,")"],[0,"\r\n    "],[-1,"var"],[1,"   "],[0," a = []"],[-1,";"],[0,"\r\n    "],[-1,"var k = 0;\r\n    var p;\r\n    var point;\r\n    var t;\r\n    var tInP;\r\n    var pInT;\r\n    var i;\r\n\r\n    if (!open) {\r\n"],[1,"    k = -1\r\n        p=False\r\n        if not open:\r\n      "],[0,"    "]],"start1":6540,"start2":6540,"length1":167,"length2":106},{"diffs":[[0,"op()"],[-1,";"],[0,"\r\n      "],[-1,"--n;\r\n    }\r\n\r\n    // For closed lines, rotate to find a suitable shared starting point.\r\n    for (; k < n; ++k) {\r\n"],[1,"      n-=1\r\n        while k<n:\r\n            k+=1\r\n      "],[0,"    "]],"start1":6656,"start2":6656,"length1":133,"length2":72},{"diffs":[[0,"coincidences"],[-1,"."],[1,"['"],[0,"peek"],[1,"']"],[0,"(points[k]);"]],"start1":6734,"start2":6734,"length1":29,"length2":32},{"diffs":[[0,"[k])"],[-1,";"],[0,"\r\n      "],[1,"    "],[1,"  "],[0,"if "],[-1,"("],[0,"open"],[-1,") {\r\n"],[1,":\r\n  "],[0,"        "],[1,"      "],[0,"break"],[-1,";"],[0,"\r\n      "],[-1,"}\r\n"],[0,"    "]],"start1":6761,"start2":6761,"length1":55,"length2":61},{"diffs":[[0," if "],[-1,"("],[0,"p "],[-1,"&& !"],[1,"and not "],[0,"line"]],"start1":6823,"start2":6823,"length1":15,"length2":18},{"diffs":[[0,"linesEqual(p, t)"],[-1,") {"],[1,":"],[0,"\r\n        tInP ="]],"start1":6837,"start2":6837,"length1":35,"length2":33},{"diffs":[[0,"    "],[1," "],[-1,"tInP = t.every(function(line) { return p.indexOf(line) >= 0; });\r\n        pInT = p.every(function(line) { return t.indexOf(line) >= 0; });\r\n"],[1,"       tInP = all(map(lambda line: line in p,t))\r\n                pInT = all(map(lambda line: line in t,p))\r\n        "],[0,"    "]],"start1":6860,"start2":6860,"length1":148,"length2":126},{"diffs":[[0," if "],[-1,"("],[0,"tInP "],[-1,"&& !"],[1,"and not "],[0,"pInT"],[-1,") {"],[1,":"],[0,"\r\n  "]],"start1":6989,"start2":6989,"length1":25,"length2":26},{"diffs":[[0,"    "],[-1,"--k;"],[1,"          k-=1"],[0,"\r\n  "]],"start1":7019,"start2":7019,"length1":12,"length2":22},{"diffs":[[0,"  k-=1\r\n        "],[-1,"}\r\n"],[0,"        break;\r\n"]],"start1":7031,"start2":7031,"length1":35,"length2":32},{"diffs":[[0,"eak;\r\n      "],[-1,"}\r\n"],[0,"      p = t;"]],"start1":7057,"start2":7057,"length1":27,"length2":24},{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"//"],[1,"#"],[0," If "]],"start1":7083,"start2":7083,"length1":17,"length2":13},{"diffs":[[0,"m.\r\n"],[1,"    "],[0,"    if "],[-1,"("],[0,"k =="],[-1,"="],[0," n "],[-1,"&& p.length"],[1,"and len(p)"],[0," > 1"],[-1,") {"],[1,":"],[0,"\r\n      "],[-1,"var"],[1,"     "],[0," poi"]],"start1":7164,"start2":7164,"length1":53,"length2":54},{"diffs":[[0,"oints[0]"],[-1,";"],[0,"\r\n"],[1,"      "],[0,"      i "]],"start1":7225,"start2":7225,"length1":19,"length2":24},{"diffs":[[0,"i = "],[-1,"0;"],[1,"-1"],[0,"\r\n      "],[-1,"for (k = 0; i < n; ++i) {"],[1,"      k=0\r\n            while i<n:\r\n                i+=1"],[0,"\r\n  "]],"start1":7247,"start2":7247,"length1":43,"length2":73},{"diffs":[[0,"  i+=1\r\n        "],[1," "],[1,"       "],[0,"point = points[i"]],"start1":7310,"start2":7310,"length1":32,"length2":40},{"diffs":[[0,"ts[i];\r\n        "],[1,"  "],[1,"      "],[0,"if "],[-1,"("],[0,"pointCompare(poi"]],"start1":7346,"start2":7346,"length1":36,"length2":43},{"diffs":[[0,"int) > 0"],[-1,") {\r\n"],[1,":\r\n      "],[0,"        "]],"start1":7396,"start2":7396,"length1":21,"length2":25},{"diffs":[[0,"                "],[1,"    "],[0,"point0 = point;\r"]],"start1":7407,"start2":7407,"length1":32,"length2":36},{"diffs":[[0,"int0 = point"],[-1,";"],[0,"\r\n          "]],"start1":7429,"start2":7429,"length1":25,"length2":24},{"diffs":[[0,"    "],[-1,"k = i;\r\n        }\r\n      }"],[1,"          k = i"],[0,"\r\n    "],[-1,"}\r\n"],[0,"    i = "],[-1,"0;\r\n    for (var m = open ? n : n + 1; i < m; ++i) {\r\n"],[1,"-1\r\n        m = n if open else n + 1\r\n        while i < m:\r\n            i+=1\r\n    "],[0,"      "],[1,"  "],[0,"poin"]],"start1":7449,"start2":7449,"length1":111,"length2":127},{"diffs":[[0," k) % n]"],[-1,";"],[0,"\r\n"],[1,"      "],[0,"      p "]],"start1":7591,"start2":7591,"length1":19,"length2":24},{"diffs":[[0,"nces"],[-1,"."],[1,"['"],[0,"peek"],[1,"']"],[0,"(point)"],[-1,";"],[0,"\r\n      "],[1,"  "],[-1,"if (!"],[1,"    if  not "],[0,"line"]],"start1":7625,"start2":7625,"length1":34,"length2":45},{"diffs":[[0,", t)"],[-1,") {\r\n"],[1,":\r\n  "],[0,"        "],[1,"      "],[0,"tInP = "],[-1,"t.every(function(line) { return p.indexOf(line) >= 0; });\r\n        pInT = p.every(function(line) { return t.indexOf(line) >= 0; });\r\n"],[1,"all(map(lambda line: line in p,t))\r\n                pInT = all(map(lambda line: line in t,p))\r\n       "],[0,"        "],[1," "],[0,"if "],[-1,"("],[0,"tInP"],[-1,") {\r\n"],[1,":\r\n  "],[0,"    "]],"start1":7678,"start2":7678,"length1":182,"length2":157},{"diffs":[[0,"P:\r\n            "],[-1,"a.push"],[1,"        a.append"],[0,"(point);\r\n      "]],"start1":7825,"start2":7825,"length1":38,"length2":48},{"diffs":[[0,"oint);\r\n        "],[-1,"}\r\n"],[0,"        arc(a);\r"]],"start1":7859,"start2":7859,"length1":35,"length2":32},{"diffs":[[0,"  arc(a)"],[-1,";"],[0,"\r\n      "]],"start1":7881,"start2":7881,"length1":17,"length2":16},{"diffs":[[0,"    "],[1,"       "],[1," "],[0,"if "],[-1,"(!"],[1,"not "],[0,"tInP "],[-1,"&& !pInT) {\r\n"],[1,"and not pInT:\r\n    "],[0,"    "]],"start1":7895,"start2":7895,"length1":31,"length2":47},{"diffs":[[0,"    "],[1,"      "],[0,"arc([a["],[-1,"a.length - "],[1,"-"],[0,"1], "]],"start1":7944,"start2":7944,"length1":26,"length2":22},{"diffs":[[0," point])"],[-1,";"],[0,"\r\n      "]],"start1":7965,"start2":7965,"length1":17,"length2":16}]],"length":10735,"saved":false}
{"ts":1376675608823,"patch":[[{"diffs":[[0,"oint])\r\n        "],[-1,"}\r\n"],[0,"        if (pInT"]],"start1":7967,"start2":7967,"length1":35,"length2":32},{"diffs":[[0," if "],[-1,"("],[0,"pInT"],[-1,") {\r\n"],[1,":\r\n     "],[0,"    "]],"start1":7990,"start2":7990,"length1":18,"length2":20},{"diffs":[[0,"    "],[1,"     "],[0,"a = [a["],[-1,"a.length - "],[1,"-"],[0,"1]]"],[-1,";"],[0,"\r\n  "]],"start1":8012,"start2":8012,"length1":30,"length2":24},{"diffs":[[0,"]]\r\n        "],[-1,"}"],[1,"       "],[0," else"],[-1," {"],[1,":"],[0,"\r\n          "]],"start1":8030,"start2":8030,"length1":32,"length2":37},{"diffs":[[0,"    "],[-1,"a = [];\r\n"],[1,"  "],[0,"        "],[-1,"}"],[1,"a = [];"],[0,"\r\n      "],[-1,"}\r\n"],[0,"    "]],"start1":8063,"start2":8063,"length1":37,"length2":33},{"diffs":[[0," if "],[-1,"(!"],[1,"not "],[0,"a.le"]],"start1":8097,"start2":8097,"length1":10,"length2":12},{"diffs":[[0,".length "],[-1,"||"],[1,"or"],[0," pointCo"]],"start1":8106,"start2":8106,"length1":18,"length2":18},{"diffs":[[0,"e(a["],[-1,"a.length - "],[1,"-"],[0,"1], "]],"start1":8128,"start2":8128,"length1":19,"length2":9},{"diffs":[[0,"int)"],[-1,") {\r\n"],[1,":\r\n   "],[0,"        "],[-1,"a.push"],[1,"     a.append"],[0,"(point)"],[-1,"; //"],[1," #"],[0," ski"]],"start1":8139,"start2":8139,"length1":38,"length2":44},{"diffs":[[0,"ints\r\n      "],[-1,"}\r\n"],[0,"      t = p;"]],"start1":8197,"start2":8197,"length1":27,"length2":24},{"diffs":[[0," = p"],[-1,";"],[0,"\r\n    "],[-1,"}\r\n\r\n"],[0,"    "]],"start1":8216,"start2":8216,"length1":20,"length2":14},{"diffs":[[0,"rue)"],[-1,";"],[0,"\r\n\r\n    "],[-1,"function"],[1,"    def"],[0," arc"]],"start1":8238,"start2":8238,"length1":25,"length2":23},{"diffs":[[0,"ast)"],[-1," {"],[1,":"],[0,"\r\n      "],[-1,"var"],[1,"     "],[0," n = "],[-1,"a."],[0,"len"],[-1,"gth;"],[1,"(a)"],[0,"\r\n      "],[-1,"var"],[1,"     "],[0," point"],[-1,";"],[0,"\r\n      "],[1,"   "],[1,"   "],[0,"if "],[-1,"("],[0,"last "],[-1,"&& !lineArcs.length &&"],[1,"and not len(lineArcs) and"],[0," n =="],[-1,"="],[0," 1"],[-1,") {"],[1,":"],[0,"\r\n  "]],"start1":8266,"start2":8266,"length1":103,"length2":107}]],"length":10720,"saved":false}
{"ts":1376675853155,"patch":[[{"diffs":[[0,"nd n == 1:\r\n"],[1,"        "],[0,"        poin"]],"start1":8359,"start2":8359,"length1":24,"length2":32},{"diffs":[[0,"point = a[0]"],[-1,";"],[0,"\r\n        va"]],"start1":8387,"start2":8387,"length1":25,"length2":24},{"diffs":[[0,"        "],[-1,"var"],[1,"       "],[0," index ="]],"start1":8401,"start2":8401,"length1":19,"length2":23},{"diffs":[[0,"ointsByPoint"],[-1,"."],[1,"['"],[0,"get"],[1,"']"],[0,"(point)"],[-1,";"],[0,"\r\n        if"]],"start1":8426,"start2":8426,"length1":36,"length2":38},{"diffs":[[0,"    "],[1,"     "],[-1,"if (index.length) {\r\n"],[1,"   if len(index):\r\n          "],[0,"    "]],"start1":8458,"start2":8458,"length1":29,"length2":42},{"diffs":[[0,"       lineArcs."],[-1,"push"],[1,"append"],[0,"(index[0]);\r\n   "]],"start1":8499,"start2":8499,"length1":36,"length2":38},{"diffs":[[0,"ndex[0])"],[-1,";"],[0,"\r\n      "]],"start1":8523,"start2":8523,"length1":17,"length2":16},{"diffs":[[0,"    "],[1,"   "],[-1,"}"],[1,"    "],[0," else"],[-1," {"],[1,":\r\n                    index[0] = len(arcs)"],[0,"\r\n"],[1,"          "],[0,"    "]],"start1":8537,"start2":8537,"length1":18,"length2":75},{"diffs":[[0,"ineArcs."],[-1,"push"],[1,"append"],[0,"(index[0"]],"start1":8619,"start2":8619,"length1":20,"length2":22},{"diffs":[[0,"x[0]"],[-1," = arcs.length);\r\n          arcs.push"],[1,")\r\n                    arcs.append"],[0,"(a)"],[-1,";"],[0,"\r\n  "]],"start1":8638,"start2":8638,"length1":49,"length2":45},{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"  } else "],[1,"el"],[0,"if "],[-1,"("],[0,"n > 1"],[-1,") {"],[1,":"],[0,"\r\n  "]],"start1":8685,"start2":8685,"length1":36,"length2":23},{"diffs":[[0,"        "],[1," "],[-1,"var"],[1,"      "],[0," a0 = a["]],"start1":8706,"start2":8706,"length1":19,"length2":23},{"diffs":[[0,"0 = a[0]"],[-1,";"],[0,"\r\n      "]],"start1":8723,"start2":8723,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"var"],[1,"       "],[0," a1 = a["],[-1,"n - "],[1,"-"],[0,"1]"],[-1,";"],[0,"\r\n  "]],"start1":8737,"start2":8737,"length1":26,"length2":26},{"diffs":[[0,"1]\r\n        "],[1,"    "],[1,"    "],[0,"point ="],[1," a0 if"],[0," pointCompar"]],"start1":8757,"start2":8757,"length1":31,"length2":45},{"diffs":[[0,"< 0 "],[-1,"? a0 :"],[1,"else"],[0," a1"],[-1,";"],[0,"\r\n  "]],"start1":8812,"start2":8812,"length1":18,"length2":15},{"diffs":[[0,"a1\r\n        "],[-1,"var"],[1,"       "],[0," pointArcs ="]],"start1":8821,"start2":8821,"length1":27,"length2":31},{"diffs":[[0,"oint"],[-1,"."],[1,"['"],[0,"get"],[1,"']"],[0,"(point)"],[-1,";"],[0,"\r\n  "]],"start1":8860,"start2":8860,"length1":20,"length2":22},{"diffs":[[0,"    "],[-1,"if (pointArcs.some(matchForward)) {\r\n"],[1,"            if any(map(matchForward,pointArcs)):\r\n      "],[0,"    "]],"start1":8884,"start2":8884,"length1":45,"length2":64},{"diffs":[[0,"                "],[1,"        "],[0,"return"],[-1,";"],[0,"\r\n        }\r\n   "]],"start1":8938,"start2":8938,"length1":39,"length2":46}]],"length":10835,"saved":false}
{"ts":1376676016254,"patch":[[{"diffs":[[0,"            "],[-1,"    "],[0,"if any(map(m"]],"start1":8884,"start2":8884,"length1":28,"length2":24},{"diffs":[[0,"ntArcs))"],[1," or any(map(matchBackward,pointArcs))"],[0,":\r\n     "]],"start1":8923,"start2":8923,"length1":16,"length2":53},{"diffs":[[0,"            "],[-1,"    "],[0,"return\r\n    "]],"start1":8979,"start2":8979,"length1":28,"length2":24},{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"        "],[-1,"if ("],[0,"poin"]],"start1":9003,"start2":9003,"length1":23,"length2":16},{"diffs":[[0,"rcs."],[-1,"some(matchBackward)) {\r\n          return;\r\n        }\r\n        pointArcs.push(a);\r\n"],[1,"append(a)\r\n                a['index']=len(arcs)\r\n        "],[0,"    "]],"start1":9021,"start2":9021,"length1":90,"length2":65},{"diffs":[[0,"sh(a"],[-1,"."],[1,"['"],[0,"index"],[-1," = arcs.length);\r\n"],[1,"'])\r\n       "],[0,"        "],[1," "],[0,"arcs."],[-1,"push"],[1,"append"],[0,"(a)"],[-1,";"],[0,"\r\n  "]],"start1":9101,"start2":9101,"length1":53,"length2":50}]],"length":10829,"saved":false}
{"ts":1376676790989,"patch":[[{"diffs":[[0," true)\r\n"],[-1,"\r\n"],[0,"        "]],"start1":8236,"start2":8236,"length1":18,"length2":16},{"diffs":[[0,"\r\n      "],[-1,"}\r\n\r\n      function"],[1,"  def"],[0," matchFo"]],"start1":9145,"start2":9145,"length1":35,"length2":21},{"diffs":[[0,"chForward(b)"],[-1," {"],[1,":"],[0,"\r\n        va"]],"start1":9162,"start2":9162,"length1":26,"length2":25},{"diffs":[[0,"):\r\n        "],[-1,"var"],[1,"   "],[0," i = "],[-1,"-1"],[1,"0"],[0,";\r\n"],[1,"    "],[0,"        if ("]],"start1":9173,"start2":9173,"length1":37,"length2":40},{"diffs":[[0,"     if "],[-1,"(b.length"],[1,"len(b)"],[0," !="],[-1,"="],[0," n"],[-1,") {\r\n"],[1,":\r\n      "],[0,"        "]],"start1":9204,"start2":9204,"length1":36,"length2":36},{"diffs":[[0,"urn "],[-1,"f"],[1,"F"],[0,"alse"],[-1,";"],[0,"\r\n     "],[-1,"   }\r\n"],[0,"       "],[-1," "],[0,"while "],[-1,"(++"],[0,"i < n"],[-1,") {"],[1,":"],[0,"\r\n  "]],"start1":9245,"start2":9245,"length1":52,"length2":39},{"diffs":[[0,"< n:\r\n          "],[1,"      "],[0,"if "],[-1,"("],[0,"pointCompare(a[i"]],"start1":9276,"start2":9276,"length1":36,"length2":41},{"diffs":[[0,"], b[i])"],[-1,") {\r\n"],[1,":\r\n       "],[0,"        "]],"start1":9317,"start2":9317,"length1":21,"length2":26},{"diffs":[[0,"            "],[1," "],[0,"return "],[-1,"f"],[1,"F"],[0,"alse;\r\n     "]],"start1":9335,"start2":9335,"length1":32,"length2":33},{"diffs":[[0,"\r\n          "],[-1,"}\r\n"],[0,"      "],[-1,"  }\r\n"],[1,"i+=1\r\n    "],[0,"        line"]],"start1":9361,"start2":9361,"length1":38,"length2":40},{"diffs":[[0,"rcs."],[-1,"push(b.index);\r\n"],[1,"append(b['index'])\r\n    "],[0,"    "]],"start1":9402,"start2":9402,"length1":24,"length2":32},{"diffs":[[0,"urn "],[-1,"t"],[1,"T"],[0,"rue;\r\n"],[1,"\r\n"],[0,"      "],[-1,"}\r\n\r\n      function"],[1,"  def"],[0," mat"]],"start1":9441,"start2":9441,"length1":40,"length2":28},{"diffs":[[0,"kward(b)"],[-1," {"],[1,":"],[0,"\r\n      "]],"start1":9474,"start2":9474,"length1":18,"length2":17},{"diffs":[[0,"    "],[-1,"var"],[1,"   "],[0," i = "],[-1,"-1;"],[1,"0"],[0,"\r\n  "]],"start1":9489,"start2":9489,"length1":19,"length2":17},{"diffs":[[0,"    "],[-1,"if (b.length"],[1,"    if len(b)"],[0," !="],[-1,"="],[0," n"],[-1,") {\r\n"],[1,":\r\n      "],[0,"    "]],"start1":9508,"start2":9508,"length1":31,"length2":35},{"diffs":[[0,"         return "],[-1,"f"],[1,"F"],[0,"alse"],[-1,";"],[0,"\r\n        }\r\n   "]],"start1":9540,"start2":9540,"length1":38,"length2":37},{"diffs":[[0,"    "],[-1," }\r\n"],[0,"     "],[-1,"   "],[0,"while "],[-1,"(++i < n) {\r\n"],[1,"i<n:\r\n      "],[0,"    "]],"start1":9566,"start2":9566,"length1":39,"length2":31},{"diffs":[[0,"     if "],[-1,"("],[0,"pointCom"]],"start1":9598,"start2":9598,"length1":17,"length2":16},{"diffs":[[0," i - 1])"],[-1,") {\r\n"],[1,":\r\n       "],[0,"        "]],"start1":9630,"start2":9630,"length1":21,"length2":26},{"diffs":[[0,"    "],[1," "],[0,"return "],[-1,"f"],[1,"F"],[0,"alse"],[-1,";"],[0,"\r\n  "]],"start1":9656,"start2":9656,"length1":21,"length2":21},{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"      "],[-1,"  }\r\n"],[1,"i+=1\r\n    "],[0,"    "]],"start1":9681,"start2":9681,"length1":22,"length2":24},{"diffs":[[0,"rcs."],[-1,"push(~b."],[1,"append(~b['"],[0,"index"],[-1,");\r\n"],[1,"'])\r\n   "],[0,"        "],[1," "],[0,"return "],[-1,"t"],[1,"T"],[0,"rue"],[-1,";\r\n      }\r\n    }\r\n"],[0,"\r\n  "]],"start1":9714,"start2":9714,"length1":63,"length2":52},{"diffs":[[0,"Arcs"],[-1,";"],[0,"\r\n"],[-1,"  }"],[0,"\r\n\r\n"]],"start1":9779,"start2":9779,"length1":14,"length2":10}]],"length":10794,"saved":false}
{"ts":1376677547779,"patch":[[{"diffs":[[0,"cs\r\n"],[-1,"\r\n\r\n  return {\r\n    type: \"Topology\",\r\n    bbox: [x0, y0, x1, y1],\r\n    transform: {\r\n      scale: [1 / kx, 1 / ky],\r\n      translate: [x0, y0]\r\n    },\r\n    objects: objects,\r\n    arcs: arcs.map(function"],[1,"    def mapFunc "],[0,"(arc)"],[-1," {"],[1,":"],[0,"\r\n      "],[-1,"var"],[1," "],[0," i = "],[-1,"0"],[1,"1"],[0,";\r\n "]],"start1":9781,"start2":9781,"length1":235,"length2":45},{"diffs":[[0,"    "],[-1,"var"],[1," "],[0," n = "],[-1,"arc.length;"],[1,"len(arc)"],[0,"\r\n      "],[-1,"var"],[1," "],[0," poi"]],"start1":9827,"start2":9827,"length1":38,"length2":31},{"diffs":[[0,"= arc[0]"],[-1,";"],[0,"\r\n      "],[-1,"var"],[1," "],[0," x1 = po"]],"start1":9861,"start2":9861,"length1":28,"length2":25},{"diffs":[[0,"t[0]"],[-1,";"],[0,"\r\n      "],[-1,"var x2;\r\n      var dx;"],[1,"  x2= dx =y2 = dy=False"],[0,"\r\n      "],[-1,"var"],[1," "],[0," y1 "]],"start1":9888,"start2":9888,"length1":50,"length2":48},{"diffs":[[0,"t[1]"],[-1,";"],[0,"\r\n      "],[-1,"var y2;\r\n      var dy;\r\n      var"],[1," "],[0," poi"]],"start1":9942,"start2":9942,"length1":50,"length2":17},{"diffs":[[0,"x1, y1]]"],[-1,";"],[0,"\r\n"],[1,"  "],[0,"      wh"]],"start1":9967,"start2":9967,"length1":19,"length2":20},{"diffs":[[0,"ile "],[-1,"("],[0,"++i < n"],[-1,") {\r\n"],[1,"\r\n    "],[0,"    "]],"start1":9987,"start2":9987,"length1":21,"length2":21},{"diffs":[[0,"= arc[i]"],[-1,";"],[0,"\r\n      "]],"start1":10018,"start2":10018,"length1":17,"length2":16},{"diffs":[[0,"        "],[1,"    "],[0,"x2 = poi"]],"start1":10028,"start2":10028,"length1":16,"length2":20},{"diffs":[[0,"point[0]"],[-1,";"],[0,"\r\n      "]],"start1":10045,"start2":10045,"length1":17,"length2":16},{"diffs":[[0,"        "],[1,"    "],[0,"y2 = poi"]],"start1":10055,"start2":10055,"length1":16,"length2":20},{"diffs":[[0,"point[1]"],[-1,";"],[0,"\r\n      "]],"start1":10072,"start2":10072,"length1":17,"length2":16},{"diffs":[[0,"        "],[1,"    "],[0,"dx = x2 "]],"start1":10082,"start2":10082,"length1":16,"length2":20},{"diffs":[[0," x2 - x1"],[-1,";"],[0,"\r\n      "]],"start1":10098,"start2":10098,"length1":17,"length2":16},{"diffs":[[0,"        "],[1,"    "],[0,"dy = y2 "]],"start1":10108,"start2":10108,"length1":16,"length2":20},{"diffs":[[0," y2 - y1"],[-1,";"],[0,"\r\n      "]],"start1":10124,"start2":10124,"length1":17,"length2":16},{"diffs":[[0,"    "],[1,"    "],[0,"if "],[-1,"("],[0,"dx "],[-1,"|| dy) {"],[1,"or dy:"],[0,"\r\n  "]],"start1":10138,"start2":10138,"length1":23,"length2":24},{"diffs":[[0,"    "],[1,"      "],[0,"points."],[-1,"push"],[1,"append"],[0,"([dx"]],"start1":10166,"start2":10166,"length1":19,"length2":27},{"diffs":[[0,"dx, dy])"],[-1,";"],[0,"\r\n      "]],"start1":10191,"start2":10191,"length1":17,"length2":16},{"diffs":[[0,"    "],[1,"      "],[0,"x1 = x2"],[-1,";"],[0,"\r\n  "]],"start1":10207,"start2":10207,"length1":16,"length2":21},{"diffs":[[0,"    "],[1,"      "],[0,"y1 = y2"],[-1,";"],[0,"\r\n  "]],"start1":10232,"start2":10232,"length1":16,"length2":21},{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"  }"],[1,"i+=1"],[0,"\r\n    "],[-1,"  "],[0,"retu"]],"start1":10255,"start2":10255,"length1":26,"length2":22},{"diffs":[[0,"s;\r\n"],[1,"\r\n"],[0,"    "],[-1,"})\r\n  };\r\n};\r\n\r\n###end!!!"],[1,"return {\r\n        'type': \"Topology\",\r\n        'bbox': [x0, y0, x1, y1],\r\n        'transform': {\r\n            'scale': [1 / kx, 1 / ky],\r\n            'translate': [x0, y0]\r\n        },\r\n        'objects': objects,\r\n        'arcs': map(mapFunc,arcs)\r\n    }\r\n"],[0,"\r\n\r\n"]],"start1":10285,"start2":10285,"length1":37,"length2":270}]],"length":10818,"saved":false}
{"ts":1376677554923,"patch":[[{"diffs":[[0," ++i < n"],[1,":"],[0,"\r\n      "]],"start1":9990,"start2":9990,"length1":16,"length2":17}]],"length":10819,"saved":false}
{"ts":1376677568613,"patch":[[{"diffs":[[0,"n True\r\n"],[1,"    "],[0,"    retu"]],"start1":9756,"start2":9756,"length1":16,"length2":20},{"diffs":[[0,"ile "],[-1,"++"],[0,"i < "]],"start1":9991,"start2":9991,"length1":10,"length2":8}]],"length":10821,"saved":false}
{"ts":1376677580748,"patch":[[{"diffs":[[0,"rcs."],[-1,"push"],[1,"append"],[0,"(a['"]],"start1":9093,"start2":9093,"length1":12,"length2":14}]],"length":10823,"saved":false}
{"ts":1376677588473,"patch":[[{"diffs":[[0,"          i+=1\r\n"],[1,"    "],[0,"    return point"]],"start1":10258,"start2":10258,"length1":32,"length2":36}]],"length":10827,"saved":false}
{"ts":1376677595274,"patch":[[{"diffs":[[0,"n points"],[-1,";\r\n"],[0,"\r\n    re"]],"start1":10287,"start2":10287,"length1":19,"length2":16}]],"length":10824,"saved":false}
{"ts":1376677645987,"patch":[[{"diffs":[[0,"not "],[-1,"a."],[0,"len"],[-1,"gth"],[1,"(a)"],[0," or "]],"start1":8101,"start2":8101,"length1":16,"length2":14},{"diffs":[[0," arc(a, "],[-1,"t"],[1,"T"],[0,"rue)\r\n  "]],"start1":8227,"start2":8227,"length1":17,"length2":17},{"diffs":[[0,"       point"],[1,"=False"],[0,"\r\n          "]],"start1":8298,"start2":8298,"length1":24,"length2":30}]],"length":10828,"saved":false}
{"ts":1376678661310,"patch":[[{"diffs":[[0,"from sti"],[-1,"ck"],[1,"tch"],[0,"poles im"]],"start1":25,"start2":25,"length1":18,"length2":19}]],"length":10829,"saved":false}
